
#include "Database.hpp"

#include "oatpp/core/data/stream/ChunkedBuffer.hpp"
#include "oatpp/core/utils/ConversionUtils.hpp"

const char* Database::DDL =
"CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
"\r\n"
"CREATE TABLE IF NOT EXISTS EXAMPLE_USER ("
"id                    bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
"userId                varchar (256) NOT NULL,"
"login                 varchar (256) NOT NULL,"
"password              varchar (256) NOT NULL,"
"email                 varchar (256) NOT NULL,"
"emailConfirmation     varchar (256) NULL,"
"deletedTimestamp      timestamp NULL,"
"CONSTRAINT            UK_EXAMPLE_USER_USERID UNIQUE (userId),"
"CONSTRAINT            UK_EXAMPLE_USER_LOGIN UNIQUE (login),"
"CONSTRAINT            UK_EXAMPLE_USER_EMAIL UNIQUE (email)"
");"
;

const char* Database::SQL_INSERT_USER =
"INSERT INTO EXAMPLE_USER "
"(userId, login, password, email) VALUES "
"(uuid_generate_v4(), $1::varchar, $2::varchar, $3::varchar) "
"RETURNING *;";

const char* Database::SQL_SELECT_USER_BY_USERID = "SELECT * FROM EXAMPLE_USER WHERE deletedTimestamp is NULL AND userId=$1::varchar";
const char* Database::SQL_SELECT_USER_BY_LOGIN =  "SELECT * FROM EXAMPLE_USER WHERE deletedTimestamp is NULL AND login=$1::varchar";
const char* Database::SQL_SELECT_USER_BY_EMAIL =  "SELECT * FROM EXAMPLE_USER WHERE deletedTimestamp is NULL AND email=$1::varchar";

Database::Database(const oatpp::String& dbHost,
                   const oatpp::String& dbUser,
                   const oatpp::String& dbPassword,
                   const oatpp::String& dbName)
  : m_connection(nullptr)
{
  oatpp::data::stream::ChunkedBuffer stream;
  stream << "host=" << dbHost << " user=" << dbUser << " password=" << dbPassword << " dbname=" << dbName;
  m_connectionString = stream.toString();
}

Database::~Database() {
  disconnect();
}

void Database::connect() {
  if(m_connection != nullptr) {
    PQfinish(m_connection);
  }
  m_connection = PQconnectdb(m_connectionString->c_str());
  if(PQstatus(m_connection) == CONNECTION_BAD) {
    OATPP_LOGD("Database", "Connection to database failed: %s\n", PQerrorMessage(m_connection));
    PQfinish(m_connection);
    m_connection = nullptr;
  }
}

void Database::disconnect() {
  if(m_connection != nullptr) {
    PQfinish(m_connection);
    m_connection = nullptr;
  }
}

void Database::tryReconnect() {
  if(m_connection == nullptr) {
    connect();
  }
}

oatpp::Object<UserDto> Database::readUserFromResult(const ResultWrapper& result, v_int32 index) {
  
  auto cuserId = PQfnumber(result.get(), "userId");
  auto clogin = PQfnumber(result.get(), "login");
  auto cpassword = PQfnumber(result.get(), "password");
  auto cemail = PQfnumber(result.get(), "email");
  
  auto user = UserDto::createShared();
  user->userId = PQgetvalue(result.get(), index, cuserId);
  user->login = PQgetvalue(result.get(), index, clogin);
  user->password = PQgetvalue(result.get(), index, cpassword);
  user->email = PQgetvalue(result.get(), index, cemail);
  
  return user;
  
}

void Database::init() {
  ResultWrapper result = PQexec(m_connection, DDL);
  auto status = PQresultStatus(result.get());
  if (status != PGRES_COMMAND_OK) {
    OATPP_LOGD("Database", "execute init DDL command failed: %s", PQerrorMessage(m_connection));
    if(status == PGRES_FATAL_ERROR) {
      disconnect();
    }
  }
}

bool Database::checkResultOrThrow(const ResultWrapper& result) {
  auto status = PQresultStatus(result.get());
  if (status == PGRES_TUPLES_OK) {
    return true;
  } else {
    oatpp::String message = "[Database]: Error - " + oatpp::String(PQerrorMessage(m_connection));
    if(status == PGRES_FATAL_ERROR) {
      disconnect();
    }
    throw std::runtime_error(message->std_str());
  }
}

oatpp::Object<UserDto> Database::createUser(const oatpp::Object<UserDto>& user) {
  std::lock_guard<std::mutex> lock(m_mutex);
  tryReconnect();
  oatpp::Object<UserDto> createdUser;
  const v_int32 paramsNumber = 3;
  const char* params[paramsNumber] = {user->login->c_str(), user->password->c_str(), user->email->c_str()};
  ResultWrapper result = PQexecParams(m_connection, SQL_INSERT_USER, paramsNumber, nullptr, params, nullptr, nullptr, 0);
  if (checkResultOrThrow(result)) {
    if(PQntuples(result.get()) == 1) {
      createdUser = readUserFromResult(result, 0);
    }
  }
  return createdUser;
}

oatpp::Object<UserDto> Database::getUserByUid(const oatpp::String& uid) {
  std::lock_guard<std::mutex> lock(m_mutex);
  tryReconnect();
  oatpp::Object<UserDto> user;
  const char* params[1] = {uid->c_str()};
  ResultWrapper result = PQexecParams(m_connection, SQL_SELECT_USER_BY_USERID, 1, nullptr, params, nullptr, nullptr, 0);
  if (checkResultOrThrow(result)) {
    if(PQntuples(result.get()) == 1) {
      user = readUserFromResult(result, 0);
    }
  }
  return user;
}

oatpp::Object<UserDto> Database::getUserByLogin(const oatpp::String& login) {
  std::lock_guard<std::mutex> lock(m_mutex);
  tryReconnect();
  oatpp::Object<UserDto> user;
  const char* params[1] = {login->c_str()};
  ResultWrapper result = PQexecParams(m_connection, SQL_SELECT_USER_BY_LOGIN, 1, nullptr, params, nullptr, nullptr, 0);
  if (checkResultOrThrow(result)) {
    if(PQntuples(result.get()) == 1) {
      user = readUserFromResult(result, 0);
    }
  }
  return user;
}

oatpp::Object<UserDto> Database::getUserByEmail(const oatpp::String& email) {
  std::lock_guard<std::mutex> lock(m_mutex);
  tryReconnect();
  oatpp::Object<UserDto> user;
  const char* params[1] = {email->c_str()};
  ResultWrapper result = PQexecParams(m_connection, SQL_SELECT_USER_BY_EMAIL, 1, nullptr, params, nullptr, nullptr, 0);
  if (checkResultOrThrow(result)) {
    if(PQntuples(result.get()) == 1) {
      user = readUserFromResult(result, 0);
    }
  }
  return user;
}


